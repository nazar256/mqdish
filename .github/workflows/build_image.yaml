name: build

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version to use'
        required: false
        default: 'main'
        type: string
  push:
    tags:
      - '*'
env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/mqdish-consumer
  RELEASE_VERSION: ${{inputs.release_version || github.ref_name }}

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TEST_TARGET: x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ env.TEST_TARGET }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false  # Continue with other targets if one fails
      matrix:
        include:
          - rust_target: aarch64-unknown-linux-musl
            docker_platform: linux/arm64/v8
          - rust_target: armv7-unknown-linux-musleabihf
            docker_platform: linux/arm/v7
          - rust_target: arm-unknown-linux-musleabi
            docker_platform: linux/arm/v6
          - rust_target: powerpc64le-unknown-linux-gnu
            docker_platform: linux/ppc64le
          - rust_target: x86_64-unknown-linux-musl
            docker_platform: linux/amd64
          - rust_target: i686-unknown-linux-musl
            docker_platform: linux/386
          - rust_target: s390x-unknown-linux-gnu
            docker_platform: linux/s390x
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools libssl-dev

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.rust_target }}

      - name: Cache cross dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cargo/.crates.toml
          key: ${{ runner.os }}-cross-${{ matrix.rust_target }}-${{ hashFiles('**/Cross.toml') }}

      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.rust_target }}

      - name: Build binaries
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.rust_target != 'x86_64-unknown-linux-musl' }}
          command: build
          args: --release --target ${{ matrix.rust_target }} --all-targets

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:qemu-v8.1.5
          cache-image: true
          platforms: all
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.19.0
          platforms: ${{ matrix.docker_platform }}
          cache-binary: true
          install: true
          use: true

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.docker_platform }}
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-${{ matrix.rust_target }}
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-${{ matrix.rust_target }}
          build-args: |
            BINARY_PATH=./target/${{ matrix.rust_target }}/release/mqdish-consumer
          context: .
          provenance: false
          outputs: type=image,push=true

      - name: Compress artifacts
        run: |
          cd target/${{ matrix.rust_target }}/release/
          tar -czvf ../../../mqdish-consumer.${{ matrix.rust_target }}.tar.gz mqdish-consumer
          tar -czvf ../../../mqdish.${{ matrix.rust_target }}.tar.gz mqdish
          cd ../../../
          sha256sum mqdish-consumer.${{ matrix.rust_target }}.tar.gz mqdish.${{ matrix.rust_target }}.tar.gz > checksums.${{ matrix.rust_target }}.txt

      - name: Create release and upload binaries
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "mqdish*.tar.gz,checksums.${{ matrix.rust_target }}.txt"
          artifactContentType: application/gzip

  merge-manifests:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Log in to registries
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Create and push manifests
        run: |
          # Create manifest for release version (GitHub)
          docker manifest create ghcr.io/${{ github.repository_owner }}/mqdish-consumer:${{ env.RELEASE_VERSION }} \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-aarch64-unknown-linux-musl \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-armv7-unknown-linux-musleabihf \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-arm-unknown-linux-musleabi \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-powerpc64le-unknown-linux-gnu \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-x86_64-unknown-linux-musl \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-i686-unknown-linux-musl \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-s390x-unknown-linux-gnu \
          docker manifest push ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}

          # Create manifest for latest tag (GitHub)
          docker manifest create ${{ env.REGISTRY_IMAGE }}:latest \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-aarch64-unknown-linux-musl \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-armv7-unknown-linux-musleabihf \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-arm-unknown-linux-musleabi \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-powerpc64le-unknown-linux-gnu \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-x86_64-unknown-linux-musl \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-i686-unknown-linux-musl \
            ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}-s390x-unknown-linux-gnu \
          docker manifest push ${{ env.REGISTRY_IMAGE }}:latest

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ env.RELEASE_VERSION }}
